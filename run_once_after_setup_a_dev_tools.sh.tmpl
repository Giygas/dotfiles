#!/usr/bin/env bash
set -e

# Interactive prompt function
ask_install_dev_tools() {
    printf "Do you want to install development tools? (y/n) "
    read -n 1 -r response
    echo  # Add newline after input for clean formatting
    if [[ "$response" =~ ^([yY])$ ]]; then
        echo "Installing dev tools..."
        return 0  # Continue with installation
    else
        echo "Skipping dev tools installation."
        return 1  # Skip installation
    fi
}

install_nodejs_nvm() {
    echo "Installing Node.js 22.21 via NVM..."

    # Download and install nvm
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash

    # Source nvm in current session
    \. "$HOME/.nvm/nvm.sh"

    # Download and install Node.js 22
    nvm install 22

    # Verify the Node.js version
    node_version=$(node -v)
    echo "✅ Node.js $node_version installed"

    # Note: pnpm will be installed by run_once_after_setup_b_node_packages.sh.tmpl
}


# -------------------------------
# Determine OS and home directory
# -------------------------------
OS="{{ .chezmoi.os }}"
HOME_DIR="{{ .chezmoi.homeDir }}"
USER_NAME=$(whoami)

echo "OS detected: $OS"
echo "User: $USER_NAME"

echo "Home directory: $HOME_DIR"


# -------------------------------
# Oh My Zsh for both OS
# -------------------------------
if [ ! -d "$HOME_DIR/.oh-my-zsh" ]; then
    echo "Installing Oh My Zsh..."
    RUNZSH=no sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
    echo "✅ Installed Oh My Zsh"
fi

# Clone the plugins first
echo "Installing zsh-autosuggestions..."
if [ ! -d "${ZSH_CUSTOM:-$HOME_DIR/.oh-my-zsh/custom}/plugins/zsh-autosuggestions" ]; then
    git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-$HOME_DIR/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
fi

echo "Installing zsh-syntax-highlighting..."
if [ ! -d "${ZSH_CUSTOM:-$HOME_DIR/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting" ]; then
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-$HOME_DIR/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
fi


# -------------------------------
# Oh My Posh OS dependant
# -------------------------------

if ! command -v "oh-my-posh" &>/dev/null; then
    if [[ "$OS" == "darwin" ]]; then
        echo "Intalling Oh My Posh..."
        brew install jandedobbeleer/oh-my-posh/oh-my-posh
        echo "✅ Installed Oh My Posh"
    fi
    if [[ "$OS" == "linux" ]]; then
        echo "Intalling Oh My Posh..."
        curl -s https://ohmyposh.dev/install.sh | bash -s
        echo "✅ Installed Oh My Posh"
    fi
else
    echo "✅ Oh My Posh alreay installed"
fi


# -------------------------------
# Per OS setup
# -------------------------------
if ask_install_dev_tools; then
    echo "🔧 Starting dev environment setup..."

    # -------------------------------
    # MacOS install
    # -------------------------------
    if [[ "$OS" == "darwin" ]]; then
        echo "📦 Setting up macOS dev environment..."

        # Ensure Homebrew is installed
        if ! command -v brew &>/dev/null; then
            echo "Installing Homebrew..."
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        fi

        echo "Installing Homebrew packages..."
        brew update
        brew install \
            black cocoapods colima docker efm-langserver fd ffmpeg fzf ghostscript \
            git git-filter-repo gnupg go icu4c@76 imagemagick isort jsonlint lazygit \
            lua-language-server markdownlint-cli marksman mongosh neovim pandoc pinentry-mac pipx \
            plow postgresql@17 node@22 powerlevel10k prettier prettierd pyright python-lsp-server python@3.13 \
            qemu ranger ripgrep ruff visidata sst/tap/opencode stylua supabase/tap/supabase tmux \
            tursodatabase/tap/turso typescript-language-server jsonlint uvicorn vale watchman wrk yadm \
            yaml-language-server yt-dlp nvim zoxide zsh luajit
    fi

    # -------------------------------
    # Linux (Ubuntu) setup
    # -------------------------------
    if [[ "$OS" == "linux" ]]; then
        echo "📦 Setting up Linux dev environment (user: $USER_NAME)..."

        # Check for essential system packages
        REQUIRED=("git" "curl")
        MISSING=()
        for pkg in "${REQUIRED[@]}"; do
            if ! command -v "$pkg" &>/dev/null; then
                MISSING+=("$pkg")
            fi
        done

        if [ ${#MISSING[@]} -ne 0 ]; then
            echo "⚠️  The following system packages are missing: ${MISSING[*]}"
            echo "Please install them first. Example for Ubuntu/Debian:"
            echo "sudo apt update && sudo apt install -y ${MISSING[*]}"
            exit 1
        fi

        # Check if Node.js 22.21 is installed
        if ! command -v node &>/dev/null || ! command -v nvm &>/dev/null || [[ $(node -v) != "v22.21."* ]]; then
            install_nodejs_nvm
        else
            echo "✅ Node.js $(node -v) already installed"
        fi

        # Local bin setup
        mkdir -p "$HOME_DIR/.local/bin"
        export PATH="$HOME_DIR/.local/bin:$PATH"

        # Install system packages via apt
        echo "Installing system packages..."
        sudo apt update
        sudo apt install -y \
            software-properties-common \
            fd-find tmux zsh ripgrep gnupg git iputils-ping \
            ffmpeg ghostscript imagemagick qemu-kvm libvirt-daemon-system \
            libvirt-clients bridge-utils virtinst virt-manager postgresql postgresql-contrib \
            yadm watchman xclip liblua5.1-0-dev luarocks 

        ################################################
        # Python 3.14 - Direct installation from source
        ################################################
        if ! command -v python3.14 &>/dev/null; then
            echo "Installing Python 3.14 from source..."

            # Install build dependencies
            sudo apt update
            sudo apt install -y build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev wget

            # Download Python 3.14 source
            PYTHON_VERSION="3.14.0"
            wget -q https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tgz

            # Extract and build
            tar -xzf Python-${PYTHON_VERSION}.tgz
            cd Python-${PYTHON_VERSION}

            # Configure with custom prefix to avoid system conflicts
            ./configure --prefix=/usr/local/python3.14 --enable-optimizations --with-lto

            # Build and install
            make -j$(nproc)
            sudo make altinstall

            # Clean up
            cd ..
            sudo rm -rf Python-${PYTHON_VERSION} Python-${PYTHON_VERSION}.tgz

            # Bootstrap pip
            /usr/local/python3.14/bin/python3.14 -m ensurepip --upgrade

            # Create symlinks for easier access
            sudo ln -sf /usr/local/python3.14/bin/python3.14 /usr/local/bin/python3.14
            sudo ln -sf /usr/local/python3.14/bin/pip3.14 /usr/local/bin/pip3.14

            # Update alternatives
            sudo update-alternatives --install /usr/bin/python3 python3 /usr/local/python3.14/bin/python3.14 1
            sudo update-alternatives --set python3 /usr/local/python3.14/bin/python3.14
            sudo update-alternatives --install /usr/bin/pip3 pip3 /usr/local/python3.14/bin/pip3.14 1
            sudo update-alternatives --set pip3 /usr/local/python3.14/bin/pip3.14

            # Install neovim package
            /usr/local/python3.14/bin/python3.14 -m pip install --user neovim

            echo "✅ Python 3.14 installed successfully"
        else
            echo "✅ Python 3.14 already installed"
        fi

        # Install Go
        if ! command -v go &>/dev/null; then
            echo "Installing Go..."
            GO_VERSION="1.25.3"
            wget -q https://go.dev/dl/go${GO_VERSION}.linux-amd64.tar.gz
            sudo rm -rf /usr/local/go
            sudo tar -C /usr/local -xzf go${GO_VERSION}.linux-amd64.tar.gz
            rm -rf go${GO_VERSION}.linux-amd64.tar.gz
            sudo rm -rf go
            source "$HOME_DIR/.zshrc" || true
            export PATH=$PATH:/usr/local/go/bin
            echo "✅ GO version ${GO_VERSION} installed successfully"
        else
            echo "✅ GO version ${GO_VERSION} already installed"
        fi

        # Install gopls
        if command -v go &>/dev/null; then
            go install golang.org/x/tools/gopls@latest
        fi

        # Python tools
        echo "Installing Python packages..."
        pip3 install --user \
            black isort fastapi uvicorn python-lsp-server ruff visidata \
            pyright pipx jsonlint neovim ranger-fm

        # Install additional Python tools via pipx
        if command -v pipx &>/dev/null; then
            echo "Installing Python tools via pipx..."
            pipx install git-filter-repo
        fi
        
        # Install opencode 
        if ! command -v opencode &>/dev/null; then
            echo "Installing OpenCode..."
            curl -fsSL https://opencode.ai/install | bash -
        else
            echo "✅ OpenCode already installed"
        fi
        
        # Binary tools helper
        install_bin() {
            url="$1"
            name="$2"
            dest="$HOME_DIR/.local/bin/$name"
            if ! command -v "$name" &>/dev/null; then
                tmp=$(mktemp)
                tmpdir=$(mktemp -d)
                
                echo "Downloading $name..."
                curl -sSL "$url" -o "$tmp"
                
                # Check if it's a tar.gz archive
                if [[ "$url" == *.tar.gz ]]; then
                    echo "Extracting $name..."
                    tar -xzf "$tmp" -C "$tmpdir"
                    
                    # Find the executable in the extracted directory
                    executable=$(find "$tmpdir" -type f -name "$name" -executable | head -1)
                    if [[ -z "$executable" ]]; then
                        # Try to find any executable with similar name
                        executable=$(find "$tmpdir" -type f -executable | head -1)
                    fi
                    
                    if [[ -n "$executable" ]]; then
                        mv "$executable" "$dest"
                        echo "✅ Installed $name"
                    else
                        echo "❌ Could not find executable for $name"
                        rm -rf "$tmpdir" "$tmp"
                        return 1
                    fi
                else
                    # Direct binary download
                    mv "$tmp" "$dest"
                    chmod +x "$dest"
                    echo "✅ Installed $name"
                fi
                
                rm -rf "$tmpdir" "$tmp"
            else
                echo "✅ $name already installed"
            fi
        }

        # User binaries
        install_bin "https://github.com/JohnnyMorganz/StyLua/releases/download/v2.3.0/stylua-linux-x86_64.zip" "stylua"
        install_bin "https://github.com/supabase/cli/releases/download/v2.51.0/supabase_linux_amd64.tar.gz" "supabase"
        install_bin "https://github.com/errata-ai/vale/releases/download/v3.12.0/vale_3.12.0_Linux_64-bit.tar.gz" "vale"
        install_bin "https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp" "yt-dlp"
        install_bin "https://github.com/ajeetdsouza/zoxide/releases/download/v0.9.8/zoxide-0.9.8-x86_64-unknown-linux-musl.tar.gz" "zoxide"
        install_bin "https://github.com/mattn/efm-langserver/releases/download/v0.0.54/efm-langserver_v0.0.54_linux_amd64.tar.gz" "efm-langserver"
        install_bin "https://github.com/artempyanykh/marksman/releases/download/2024-12-18/marksman-linux-x64" "marksman"
        install_bin "https://github.com/jgm/pandoc/releases/download/3.8.2/pandoc-3.8.2-linux-amd64.tar.gz" "pandoc"
        install_bin "https://github.com/charmbracelet/gum/releases/download/v0.17.0/gum_0.17.0_Linux_x86_64.tar.gz" "gum"

        # Install yq
        if ! command -v "yq" &>/dev/null; then
            sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
            sudo chmod +x /usr/local/bin/yq
            echo "✅ Installed yq"
        else
            echo "✅ yq already installed"
        fi

        # Install lazygit with dynamic version detection
        if ! command -v "lazygit" &>/dev/null; then
            echo "Installing lazygit..."
            LAZYGIT_VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": *"v\K[^"]*')
            curl -Lo lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/download/v${LAZYGIT_VERSION}/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz"
            tar xf lazygit.tar.gz lazygit
            sudo install lazygit -D -t /usr/local/bin
            rm -f lazygit.tar.gz lazygit
            echo "✅ Installed lazygit"
        else
            echo "✅ lazygit already installed"
        fi

        # Install wezterm nightly
        if ! command -v "wezterm" &>/dev/null; then
            curl -LO https://github.com/wezterm/wezterm/releases/download/nightly/wezterm-nightly.Ubuntu24.04.deb
            sudo apt install -y ./wezterm-nightly.Ubuntu24.04.deb
            rm -rf wezterm-nightly.Ubuntu24.04.deb
        fi

        # FZF
        if ! command -v "fzf" &>/dev/null; then
            git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
            ~/.fzf/install --all
            echo "✅ Installed fzf"
        else
            echo "✅ Fzf already installed"
        fi
        
        # Install turso using official installer
        if ! command -v "turso" &>/dev/null; then
            echo "Installing turso..."
            curl --proto '=https' --tlsv1.2 -LsSf https://github.com/tursodatabase/turso/releases/latest/download/turso_cli-installer.sh | sh
            source $HOME/.turso/env
            echo "✅ Installed turso and ran source $HOME/.turso/env"
        fi

        # Install Lua language server
        if ! command -v "lua-language-server" &>/dev/null; then
            echo "Installing Lua language server..."
            mkdir -p "$HOME_DIR/.local/lua-language-server"
            cd "$HOME_DIR/.local/lua-language-server" || { echo "Failed to change directory"; exit 1; }
            
            echo "Downloading Lua language server..."
            wget -q https://github.com/LuaLS/lua-language-server/releases/download/3.15.0/lua-language-server-3.15.0-linux-x64.tar.gz || { echo "Failed to download"; exit 1; }
            
            echo "Extracting Lua language server..."
            tar -xzf lua-language-server-3.15.0-linux-x64.tar.gz || { echo "Failed to extract"; exit 1; }
            
            # Check if the executable exists
            if [ -f "bin/lua-language-server" ]; then
                ln -sf "$HOME_DIR/.local/lua-language-server/bin/lua-language-server" "$HOME_DIR/.local/bin/lua-language-server"
                chmod +x "$HOME_DIR/.local/bin/lua-language-server"
                echo "✅ Installed lua-language-server"
            else
                echo "❌ lua-language-server executable not found"
                ls -la
                exit 1
            fi
            
            cd - > /dev/null || exit 1
        else
            echo "✅ lua-language-server already installed"
        fi

        # Create symlinks for tools with different names
        if command -v fdfind &>/dev/null && ! command -v fd &>/dev/null; then
            ln -sf "$(which fdfind)" "$HOME_DIR/.local/bin/fd"
        fi

    fi
else
    echo "⏭️Skipping dev tools installation"
fi

# -------------------------------
# Latest nvim version for linux
# -------------------------------
install_neovim() {
    echo "Installing neovim..."
    curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim-linux-x86_64.tar.gz
    sudo rm -rf /opt/nvim-linux-x86_64
    sudo tar -C /opt -xzf nvim-linux-x86_64.tar.gz
    rm -rf nvim-linux-x86_64.tar.gz

    if ! grep -q "/opt/nvim-linux-x86_64/bin" "$HOME_DIR/.zshrc"; then
        echo 'export PATH="$PATH:/opt/nvim-linux-x86_64/bin"' >> "$HOME_DIR/.zshrc"
    fi
    echo "✅ Neovim tarball installed successfully"
}

if [[ "$OS" == "linux" ]]; then
    if command -v "nvim" &>/dev/null; then
        current_version=$(nvim --version | head -n1 | grep -oP 'v\K[0-9]+\.[0-9]+')
        min_version="0.11"

        if printf '%s\n' "$min_version" "$current_version" | sort -V | head -n1 | grep -q "$min_version"; then
            echo "👌 Neovim $current_version already installed (>= 0.11)"
        else
            echo "🔄 Neovim $current_version < 0.11, upgrading..."
            install_neovim
        fi
    else
        install_neovim
    fi

    
fi

# -------------------------------
# TMP for both OS
# -------------------------------
if [ ! -d "$HOME_DIR/.tmux/plugins/tpm" ]; then
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
    echo "✅ Installed tpm"
else

    echo "👌tpm already installed"
fi

# -------------------------------
# Deno for both OS
# -------------------------------
if command -v "nvim" &>/dev/null; then
    curl -fsSL https://deno.land/install.sh | sh
    echo "✅ Installed deno"
else
    echo "✅ Deno already installed"
fi


echo "🎉 Dev environment setup complete for $USER_NAME on $OS!"
